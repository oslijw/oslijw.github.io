<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>自定义stack遇到的坑</title>
    <url>/2019/12/14/zi-ding-yi-stack-yu-dao-de-keng/</url>
    <content><![CDATA[<h2 id="什么是栈呢"><a href="#什么是栈呢" class="headerlink" title="什么是栈呢"></a>什么是栈呢</h2><p>栈是一个比较常见而且比较常用的数据结构</p>
<p>很多语言中也有封装好的栈</p>
<p>但是呢<br>学习嘛,难免要自己来定义一个栈,来深入的体会学习栈的FILO的特性</p>
<h2 id="构建栈的时候遇到的困难"><a href="#构建栈的时候遇到的困难" class="headerlink" title="构建栈的时候遇到的困难"></a>构建栈的时候遇到的困难</h2><p><strong>基于java</strong></p>
<p>我在构建栈的时候,想利用泛型来建立<br>(麻烦恰恰是由于泛型的一些特性)</p>
<p>在泛型中,如果要在类中利用泛型参数来创建对象,是不能直接用new的</p>
<p>那么这时候就会有人提问,那我又是怎么创建的呢??</p>
<p>这时候就要用到java的一个特性–反射</p>
<p>至于反射,由于近来期末考将近,我能有时间来写这个博客已经实属不易了<br>所以,等我寒假看看书总结一下,反射,这一java特性吧</p>
<h2 id="解决代码"><a href="#解决代码" class="headerlink" title="解决代码"></a>解决代码</h2><p>‘’’<br>stacks =(T[]) Array.newInstance(Object.class,len);<br>// 利用反射,先反射成一个class对象,然后再强制类型转换会T就可以了<br>// 基于一个数组来建立线性栈,当然也可以建立链式栈<br>‘’’</p>
<p>在使用前,当然不能直接用,需要先import相关的包<br>‘’’<br>import java.lang.reflect.Array;<br>‘’’</p>
<p>从import的包也可以看出来是利用反射特性</p>
<h2 id="栈的完整代码"><a href="#栈的完整代码" class="headerlink" title="栈的完整代码"></a>栈的完整代码</h2><p>下面是构建整个栈的代码</p>
<p>‘’’<br>import java.lang.reflect.Array;</p>
<p>class stack<T>{<br>    //数组类型的栈<br>    private T[]stacks;<br>    //栈顶的指针,主要用于isempty的判断<br>    private int pointer;<br>    //这些东西不能让外界随便访问,所以就把访问权限设为private<br>    public stack(){<br>        //默认创建一个长度是64的栈<br>        this(64);<br>    }<br>    public stack(int len){<br>        //初始化栈<br>        //长度为len的T类型数组<br>        stacks =(T[]) Array.newInstance(Object.class,len);<br>        //刚刚开始栈里面没有任何的元素所以栈的指针是-1<br>        pointer = -1;<br>    }<br>    public boolean isEmpty(){<br>        //使用三元运算符<br>        return pointer==-1?true:false;<br>    }<br>    public void push(T info){<br>        //入栈操作<br>        pointer ++;<br>        stacks[pointer] = info;<br>    }<br>    public T peek(){<br>        //查看栈顶元素<br>        if (pointer == -1){<br>            return null;<br>        }<br>        return stacks[pointer];<br>    }<br>    public T pop(){<br>        //出栈<br>        T out = stacks[pointer];<br>        pointer –;<br>        return out;<br>    }</p>
<pre><code>@Override
public String toString() {
    StringBuffer sb = new StringBuffer();
    for (int i = 0;i &lt;= pointer;i++){
        sb.append(stacks[i]);
    }
    return sb.toString();
}</code></pre><p>}<br>‘’’</p>
]]></content>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>如何建立一个评论系统利用gittalk</title>
    <url>/2019/12/09/ru-he-jian-li-yi-ge-ping-lun-xi-tong-li-yong-gitalk/</url>
    <content><![CDATA[<h1 id="基于gitalk建立博客评论功能"><a href="#基于gitalk建立博客评论功能" class="headerlink" title="基于gitalk建立博客评论功能"></a>基于gitalk建立博客评论功能</h1><p>博客建好了,万一有人想问一些操作呢?</p>
<p>有的人可能说可以通过放在博客上的qq什么的联系到</p>
<p>但是,自己搭一个功能,不香嘛??<br><img src="https://i.loli.net/2019/12/09/MXjEzgYdpciVG5f.png" alt=""></p>
<p>那就记录一下怎么搭建评论功能吧</p>
<p>别用gitment 好像有点问题<br>和我一样用gitalk就好了</p>
<p>先去申请一个<a href="https://github.com/settings/applications/new" target="_blank" rel="noopener">OAuth</a>吧</p>
<p>具体的这样填<br><img src="https://i.loli.net/2019/12/09/LSTwrzC39ofdnFY.png" alt=""></p>
<p>等register好了之后,记住clientId 和clientSecret 等下有用到</p>
<p>然后打开主题的_config.yml 找到gitalk</p>
<p>把配置改成</p>
<pre><code>gitalk:
  enable: true
  owner: *** # 自己的github昵称
  repo: *** # 别听别人瞎说 这边就是仓库名字 不要什么http什么的
  oauth:
    clientId: *** # 这边就是刚刚复制的
    clientSecret: *** # 同理
  admin: &#39;xxx&#39; # 这边我也不知道 好像可以随便弄</code></pre><p>然后就在命令行打</p>
<pre><code>hexo clean&amp;&amp;hexo g&amp;&amp;hexo d</code></pre><p>然后就可以看到gitalk的加载</p>
<p>但是要登陆一下自己的github才能开启</p>
<p>登陆完就会变成</p>
<p><img src="https://i.loli.net/2019/12/09/KfOYprHJP4eEhT6.png" alt=""></p>
<p>然后就可以开始用了</p>
<p>这个功能是基于github的issue功能的</p>
<p>还有 PicGo真好用</p>
]]></content>
      <tags>
        <tag>gitalk</tag>
      </tags>
  </entry>
  <entry>
    <title>图床推荐以及PicGo的好</title>
    <url>/2019/12/07/tu-chuang-tui-jian-yi-ji-picgo-de-hao/</url>
    <content><![CDATA[<h2 id="图床的用处"><a href="#图床的用处" class="headerlink" title="图床的用处"></a>图床的用处</h2><p>在发布博客的时候,由于某些特性,我们需要有一个图床来获取图片的地址</p>
<p>但是呢,我们不能每次要的时候才去找图片,然后复制图片地址吧</p>
<p>而且最重要的一点是在国内大部分网站都是不让外链的,所以这时候就需要一个外链了</p>
<h2 id="图床推荐"><a href="#图床推荐" class="headerlink" title="图床推荐"></a>图床推荐</h2><p>下面进入正题</p>
<p>也许会有很多人和我一样,被贫困所压迫着,哈哈哈哈哈,很真实的大学生现象</p>
<p>所以这时候就需要有一些免费的图床来用用</p>
<p>比如:<br>    <a href="https://sm.ms/" target="_blank" rel="noopener">sm.ms</a><br>    <a href="https://postimages.org/" target="_blank" rel="noopener">postimages</a><br>    <a href="https://imgse.com/" target="_blank" rel="noopener">路过图床</a></p>
<p>当然免费的也有很多,七牛云什么的</p>
<p>以七牛云为例,大概有10G是免费的,并且提供一段时间的测试域名,但是后期就需要有一个域名来替换临时的测试域名</p>
<p>也可以用github等途径</p>
<p>但是免费又不用注册的不香嘛??</p>
<h2 id="PicGo"><a href="#PicGo" class="headerlink" title="PicGo"></a>PicGo</h2><p>PicGo是一个很好的工具,这样我们以后上传图片的时候就不需要去人家网站上传了</p>
<p>而且PicGo是一个很好用的工具,所以极力推荐啊!!</p>
<p><a href="https://github.com/Molunerfinn/picgo/releases" target="_blank" rel="noopener">PicGo下载地址</a></p>
<p>然后在Assets里面找到对应的安装包下载就好了</p>
]]></content>
      <tags>
        <tag>图床推荐</tag>
      </tags>
  </entry>
  <entry>
    <title>markdown的基本操作</title>
    <url>/2019/12/06/markdown-de-ji-ben-cao-zuo/</url>
    <content><![CDATA[<blockquote>
<p>在使用Markdown之前，你可能需要先了解一下关于markdown的简单语法。</p>
</blockquote>
<h3 id="1-标题"><a href="#1-标题" class="headerlink" title="1.标题"></a>1.标题</h3><ul>
<li>使用 <code>#</code> 表示标题，一级标题使用一个 <code>#</code> ，二级标题使用两个 <code>##</code> ，以此类推，共有六级标题。</li>
<li>使用 <code>=====</code> 表示高阶标题，使用 <code>---------</code> 表示次阶标题。</li>
</ul>
<ol>
<li><code>#</code> 和标题之间记得有个空格哦。</li>
<li><code>====</code> 和 <code>----</code> 表示标题时，大于等于2个都可以表示。</li>
</ol>
<h3 id="2-引用"><a href="#2-引用" class="headerlink" title="2.引用"></a>2.引用</h3><p>使用 <code>&gt;</code> 表示引用， <code>&gt;&gt;</code> 表示引用里面再套一层引用，依次类推。</p>
<ol>
<li>如果 <code>&gt;</code> 和 <code>&gt;&gt;</code> 嵌套使用的话，从 <code>&gt;&gt;</code> 退到 <code>&gt;</code> 时，必须之间要加一个空格或者 <code>&gt;</code> 作为过渡，否则默认为下一行和上一行是同一级别的引用。如示例所示。</li>
<li>引用标记里可以使用其他标记，如：有序列表或无序列表标记，代码标记等。</li>
</ol>
<p>示例</p>
<blockquote>
<p>这是一级引用</p>
<blockquote>
<p>这是二级引用</p>
<blockquote>
<p>这是三级引用</p>
</blockquote>
</blockquote>
</blockquote>
<blockquote>
<p>这是一级引用</p>
</blockquote>
<h3 id="3-代码块"><a href="#3-代码块" class="headerlink" title="3 代码块"></a>3 代码块</h3><p>使用3个连续的` 符号包围起来表示代码块。</p>
<ol>
<li>本文档所有使用讲解Markdown语法标记示例的地方都是使用代码块标记的。</li>
<li>代码块前后都得有换行哦</li>
</ol>
<p>示例</p>
<pre><code>[在这输入链接标题]()$(document).ready(function() {
$(&#39;pre code&#39;).each(function(i, block) {
hljs.highlightBlock(block);
});
});
</code></pre><h3 id="4-行内代码"><a href="#4-行内代码" class="headerlink" title="4 行内代码"></a>4 行内代码</h3><p>使用``表示行内代码。本页部分文字中间的英文字母就是使用行内代码标记标记的。</p>
<p>示例</p>
<p>这是 <code>javascript</code> 代码</p>
<h4 id="5-链接"><a href="#5-链接" class="headerlink" title="5 链接"></a>5 链接</h4><p>使用 <code>[](link)</code> 表示行内链接。其中：</p>
<ul>
<li><code>[]</code> 内的内容为要添加链接的文字。</li>
<li><code>link</code> 为链接地址。</li>
</ul>
<p>示例</p>
<p>我觉得<a href="https://appsto.re/cn/jK8Cbb.i" target="_blank" rel="noopener">Markdown</a>真是个棒棒哒的编辑器😊.</p>
<h3 id="6-数学公式"><a href="#6-数学公式" class="headerlink" title="6 数学公式"></a>6 数学公式</h3><p><code>$</code>包围的区块将会解析为数学公式，连续的<code>$$</code>将独占一行并居中显示</p>
<p>示例</p>
<p>当 $a \ne 0$, 此方程式有两个解 $ax^2 + bx + c = 0$，他们是</p>
<p>$$x = {-b \pm \sqrt{b^2-4ac} \over 2a}.$$</p>
<h3 id="7-导入图片"><a href="#7-导入图片" class="headerlink" title="7 导入图片"></a>7 导入图片</h3><p>使用 <code>![Alt text](/path/to/img.jpg)</code> 导入图片。其中：</p>
<ul>
<li><code>Alt text</code> 为如果图片无法显示时显示的文字；</li>
<li><code>/path/to/img.jpg</code> 为图片所在路径；</li>
</ul>
<p>点击辅助键盘中的添加图片按钮可快捷添加图片</p>
<ol>
<li>==本地引用==是图片直接存储到本地通过相对路径引用，无需网络连接</li>
<li>==上传图片==将把图片上传至图床，这样在文档或图片移动时认可访问图片</li>
</ol>
<p>示例</p>
<p><img src="https://i.loli.net/2019/11/16/h4lWxQbjvUwN7XZ.jpg" alt="Markdown"></p>
<h3 id="8-Todo-List"><a href="#8-Todo-List" class="headerlink" title="8 Todo List"></a>8 Todo List</h3><p>小写x表示已完成， 空格表示未完成</p>
<ul>
<li><input checked="" disabled="" type="checkbox"> 支持数学公式</li>
<li><input checked="" disabled="" type="checkbox"> 支持TodoList</li>
<li><input checked="" disabled="" type="checkbox"> 支持自定义样式</li>
<li><input disabled="" type="checkbox"> 支持自定义图床</li>
</ul>
<h3 id="9-粗体，斜体，高亮和删除线"><a href="#9-粗体，斜体，高亮和删除线" class="headerlink" title="9 粗体，斜体，高亮和删除线"></a>9 粗体，斜体，高亮和删除线</h3><ol>
<li>使用 <code>**</code> 或者 <code>__</code> 表示<strong>粗体</strong>。</li>
<li>使用 <code>*</code> 或者 <code>_</code> 表示<em>斜体</em>。</li>
<li>使用<code>==</code>表示==高亮==</li>
<li>使用<code>~~</code>表示<del>删除</del></li>
<li><code>*</code>，<code>=</code> 或 <code>_</code> 的后面<strong>不要跟空格哦</strong></li>
</ol>
<h3 id="10-列表"><a href="#10-列表" class="headerlink" title="10 列表"></a>10 列表</h3><p>使用 <code>1. 2. 3.</code> 表示有序列表，使用 <code>*</code> 或 <code>-</code> 或 <code>+</code> 表示无序列表。</p>
<ol>
<li>无序列表或有序列表标记和后面的文字之间要有一个空格隔开。</li>
<li>有序列表标记不是按照你写的数字进行显示的，而是根据当前有序列表标记所在位置显示的，如示例1所示。</li>
<li>无序列表的项目符号是按照实心圆、空心圆、实心方格的层级关系递进的，如例2所示。通常情况下，同一层级使用同一种标记表示，便于自己查看和管理。</li>
</ol>
<h4 id="例1：有序列表"><a href="#例1：有序列表" class="headerlink" title="例1：有序列表"></a>例1：有序列表</h4><ol>
<li>第一点</li>
<li>第二点</li>
<li>第三点</li>
</ol>
<h4 id="例2：无序列表"><a href="#例2：无序列表" class="headerlink" title="例2：无序列表"></a>例2：无序列表</h4><ul>
<li>一级无序列表内容</li>
</ul>
<ul>
<li>二级无序列表内容</li>
</ul>
<ul>
<li>二级无序列表内容</li>
<li>三级无序列表内容</li>
<li>三级无序列表内容</li>
</ul>
<ul>
<li>一级无序列表内容</li>
</ul>
<ul>
<li>二级无序列表内容</li>
</ul>
<h3 id="11-分割线"><a href="#11-分割线" class="headerlink" title="11 分割线"></a>11 分割线</h3><p>使用 <code>---</code> 或者 <code>***</code> 或者 <code>* * *</code> 表示水平分割线。</p>
<ol>
<li>只要 <code>*</code> 或者 <code>-</code> 大于等于三个就可组成一条平行线。</li>
<li>使用 <code>---</code> 作为水平分割线时，要在它的前后都空一行，防止 <code>---</code> 被当成标题标记的表示方式。</li>
</ol>
<p>示例</p>
<hr>
<hr>
<hr>
<h3 id="12表格"><a href="#12表格" class="headerlink" title="12表格"></a>12表格</h3><p>上面空一行下面空两行</p>
<table>
<thead>
<tr>
<th>Heading</th>
<th>Heading</th>
<th>Heading</th>
</tr>
</thead>
<tbody><tr>
<td>Cell</td>
<td>Cell</td>
<td>Cell</td>
</tr>
<tr>
<td>Cell</td>
<td>Cell</td>
<td>Cell</td>
</tr>
</tbody></table>
<p>添加边框:</p>
<table>
<thead>
<tr>
<th>Heading</th>
<th>Heading</th>
<th>Heading</th>
</tr>
</thead>
<tbody><tr>
<td>Cell</td>
<td>Cell</td>
<td>Cell</td>
</tr>
<tr>
<td>Cell</td>
<td>Cell</td>
<td>Cell</td>
</tr>
</tbody></table>
<p>对齐方式:</p>
<table>
<thead>
<tr>
<th align="left">Heading</th>
<th align="center">Heading</th>
<th align="right">Heading</th>
</tr>
</thead>
<tbody><tr>
<td align="left">Left</td>
<td align="center">Center</td>
<td align="right">Right</td>
</tr>
<tr>
<td align="left">Left</td>
<td align="center">Center</td>
<td align="right">Right</td>
</tr>
</tbody></table>
]]></content>
      <tags>
        <tag>markdown</tag>
      </tags>
  </entry>
  <entry>
    <title>如何建立个人博客网站 hexo+github page</title>
    <url>/2019/12/05/ru-he-jian-li-ge-ren-bo-ke-wang-zhan-hexo-github-page/</url>
    <content><![CDATA[<h2 id="建立属于自己的博客网站"><a href="#建立属于自己的博客网站" class="headerlink" title="建立属于自己的博客网站"></a>建立属于自己的博客网站</h2><h3 id="基于github和hexo博客框架"><a href="#基于github和hexo博客框架" class="headerlink" title="基于github和hexo博客框架"></a>基于github和hexo博客框架</h3><p>博客在当前世界中对于程序员而言是比较有影响的<br>能长期积累发布博客并且质量比较高的话有利于自己在很多方面的发展<br>有的人选择基于现有的博客网站，有的人会想自己来创建一个</p>
<p>在这里先跟大家说一些准备条件，有些同学可能一听到搭建博客就望而却步。弄个博客网站，不得有台服务器吗？不得搞数据库吗？不得注册域名吗？没事，如果都没有，那照样是能搭建一个博客的。</p>
<p>GitHub 是个好东西啊，它提供了 GitHub Pages 帮助我们来架设一个静态网站，这就解决了服务器的问题。</p>
<p>Hexo 这个博客框架没有那么重量级，它是 MarkDown 直接写文章的，然后 Hexo 可以直接将文章编译成静态网页文件并发布，所以这样文章的内容、标题、标签等信息就没必要存数据库里面了，是直接纯静态页面了，这就解决了数据库的问题。</p>
<p>GitHub Pages 允许每个账户创建一个名为 {username}.github.io 的仓库，另外它还会自动为这个仓库分配一个 github.io 的二级域名，这就解决了域名的问题，当然如果想要自定义域名的话，也可以支持。</p>
<p>那么如何来创建一个自己的博客站点呢<br>这里从0开始基于github和hexo博客框架建立起个人博客网站</p>
<p>首先肯定需要有一个github的账户 如果没有就自己去建一个<a href="https://github.com" target="_blank" rel="noopener">github</a><br>hexo框架是基于nodejs的使用需要下载nodejs<a href="https://nodejs.org/dist/v12.13.1/node-v12.13.1-x64.msi" target="_blank" rel="noopener">下载</a><br>判断是否安装成功可以在cmd中输入</p>
<pre><code>node -v</code></pre><p>以及</p>
<pre><code>npm -v</code></pre><p>如果cmd命令行出现了版本信息那么就成功可以进行下一步 否则可能是安装步骤出错了</p>
<p>实际上如果安装正确应该也会有一个npm的运行程序<br>但是由于国内原因可能下载速度会比较慢<br>所以这里选择去淘宝镜像站下载一个cnpm以确保下载速度能提高点<br>在cmd命令行输入</p>
<pre><code>npm install -g cnpm —registry=https://registry.npm.taobao.org</code></pre><p><strong>注意 registry前面是两个-</strong></p>
<h2 id="在github上创建仓库"><a href="#在github上创建仓库" class="headerlink" title="在github上创建仓库"></a>在github上创建仓库</h2><p>在整个博客搭建前需要先在GitHub上新建一个仓库，名称为 {username}.github.io，注意这个名比较特殊，必须要是 github.io 为后缀结尾的。</p>
<p>eg：我的github昵称是oslijw 所以这个仓库名字必须是oslijw.github.io</p>
<p>新建完成后就可以进行下一步操作</p>
<h2 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h2><p>上面已经安装好了nodejs和cnpm</p>
<p>下一步就可以安装hexo博客框架</p>
<p>在cmd中输入</p>
<pre><code>cnpm install -g hexo-cli</code></pre><p>这边实际上是安装了hexo的命令行工具</p>
<p>安装成功后就可以开始使用好用的hexo命令</p>
<h2 id="初始化hexo项目"><a href="#初始化hexo项目" class="headerlink" title="初始化hexo项目"></a>初始化hexo项目</h2><p>接下来就需要初始化一个hexo项目</p>
<pre><code>hexo init {program-name}</code></pre><p>像我给我的blog项目直接命名blog所以代码是这样的：</p>
<pre><code>hexo init blog</code></pre><p>windows下使用</p>
<pre><code>dir</code></pre><p>就可以列出当前目录下的文件<br>这时候会发现有一些css 之类的文件</p>
<p>跳到新建文件夹下使用</p>
<pre><code>hexo generate</code></pre><p>这时候就能发现这些文件夹出现在oublic文件夹下</p>
<p>接下来，激动人心的时候到了，看看项目能不能在本地跑通，在cmd输入</p>
<pre><code>hexo s</code></pre><p><strong>其实这个s代表server 也可以认为是start 但是实际上全部都打上去是hexo server</strong></p>
<p>然后命令行就会出现</p>
<pre><code>INFO Start processing
INFO Hexo is running at http://localhost:4000 . Press Ctrl+C to stop</code></pre><p>这就说明我们可以在本地的4000端口访问自己的博客网站<br>在浏览器搜索栏输入 <a href="https://localhost:4000" target="_blank" rel="noopener">https://localhost:4000</a> 就可以了</p>
<p>所以只需要三个命令就创建好一个博客了</p>
<h2 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h2><p>接下来我们来将这个初始化的博客进行一下部署，放到 GitHub Pages 上面验证一下其可用性。成功之后我们可以再进行后续的修改，比如修改主题、修改页面配置等等。</p>
<p>那么怎么把这个页面部署到 GitHub Pages 上面呢，其实 Hexo 已经给我们提供一个命令，利用它我们可以直接将博客一键部署，不需要手动去配置服务器或进行其他的各项配置。</p>
<pre><code>hexo d</code></pre><p><strong>这个d是deploy</strong></p>
<p>但是呢直接部署会报错吧 因为还没配置，连仓库地址都不知道 怎么部署上去呢？</p>
<p>所以就需要修改配置文件</p>
<p>打开根目录下的 _config.yml 文件，找到 Deployment 这个地方，把刚才新建的 Repository 的地址贴过来，然后指定分支为 master 分支，最终修改为如下内容：</p>
<pre><code>deployment.html
deploy:
type: git
repo: {git repo ssh address}
branch: master</code></pre><p>repo那边需要加入自己git的远程地址</p>
<p>当然这时候还是不能直接部署，真觉得改个配置文件就可以了吗？当然不行 这时候还会报错 还欠缺一个支持git部署的插件hexo-deployer-git<br>命令如下</p>
<pre><code>cnpm install —save hexo-deployer-git</code></pre><p>安装成功后执行部署命令</p>
<pre><code>hexo d</code></pre><p>然后就可以通过github访问<br>https://{username}.github.io<br>就可以访问了 如果能正常访问就说明部署成功 如果失败就说明可能有问题</p>
<h2 id="一些相关配置"><a href="#一些相关配置" class="headerlink" title="一些相关配置"></a>一些相关配置</h2><p>这边就不具体展开 需要的时候再自行去查找一下配置方法，简单说明几个配置<br>主要是在-config.yml文件中进行配置</p>
<h3 id="配置主题"><a href="#配置主题" class="headerlink" title="配置主题"></a>配置主题</h3><p>有的人可能会觉得，诶自带的主题不好看，想从网上找一些好看的主题进行配置</p>
<p>诶，其实也是可以自行配置的步骤如下<br>首先，需要从github上找到相应的主题资源然后clone到本地</p>
<p>例如：在hexo中比较流行的框架也就是next了，而且在一些功能上也比较完善，不然哪里能在github上有那么大的star量是吧</p>
<p>我们的clone也是直接到github上的repository下载下来</p>
<p>主题的 GitHub 地址是：<a href="https://github.com/theme-next/hexo-theme-next" target="_blank" rel="noopener">https://github.com/theme-next/hexo-theme-next</a> ，我们可以直接把 master 分支 Clone 下来</p>
<pre><code>git clone https://github.com/theme-next/hexo-theme-next themes/next</code></pre><p><strong>此时命令行应该退到根目录下</strong></p>
<p>执行完毕之后 Next 主题的源码就会出现在项目的 themes/next 文件夹下。</p>
<p>然后我们需要修改下博客所用的主题名称，修改项目根目录下的 _config.yml 文件，找到 theme 字段，修改为 next 即可，修改如下：</p>
<pre><code>theme：next</code></pre><p><strong>这边只是做了一个范例 也可以从GitHub上弄别的主题 操作方面也是大同小异</strong></p>
<h2 id="配置主题样式"><a href="#配置主题样式" class="headerlink" title="配置主题样式"></a>配置主题样式</h2><p>有了主题，但是肯定也要自定义化修改一下配置吧，总不能按着人家原有的样子直接使用吧</p>
<p>Next 主题内部也提供了一个配置文件，名字同样叫做 _config.yml，只不过位置不一样，它在 themes/next 文件夹下，Next 主题里面所有的功能都可以通过这个配置文件来控制，下文所述的内容都是修改的 themes/next/_config.yml 文件。</p>
<h3 id="样式"><a href="#样式" class="headerlink" title="样式"></a>样式</h3><p>Next 主题还提供了多种样式，风格都是类似黑白的搭配，但整个布局位置不太一样，通过修改配置文件的 scheme 字段即可，我选了 Pisces 样式，修改 _config.yml （注意是 themes/next/_config.yml 文件）如下：</p>
<pre><code>scheme: Pisces</code></pre><p>另外还有几个可选项，比如：<br>Muse，Mist，Pisces，Gemini</p>
<p>可以根据自己的喜好对其进行更换</p>
<h3 id="favicon"><a href="#favicon" class="headerlink" title="favicon"></a>favicon</h3><p>favicon 就是站点标签栏的小图标，默认是用的 Hexo 的小图标，如果我们有站点 Logo 的图片的话，我们可以自己定制小图标。</p>
<p>但这并不意味着我们需要自己用 PS 自己来设计，已经有一个网站可以直接将图片转化为站点小图标，站点链接为：<a href="https://realfavicongenerator.net" target="_blank" rel="noopener">https://realfavicongenerator.net</a>，到这里上传一张图，便可以直接打包下载各种尺寸和适配不同设备的小图标。</p>
<p>图标下载下来之后把它放在 themes/next/source/images 目录下面。</p>
<p>然后在配置文件里面找到 favicon 配置项，把一些相关路径配置进去即可，示例如下：</p>
<pre><code>favicon:
small: /images/favicon-16x16.png
medium: /images/favicon-32x32.png
apple_touch_icon: /images/apple-touch-icon.png
safari_pinned_tab: /images/safari-pinned-tab.svg</code></pre><p>然后刷新一下页面就可以看到已经改变了</p>
<p><strong>还有一些更多的操作在这边就不一一列举了</strong></p>
<h2 id="发布文章"><a href="#发布文章" class="headerlink" title="发布文章"></a>发布文章</h2><p>现在整个博客只有一篇文章，那么如何写文章呢？配置好了博客，当然是关注如何发布文章，不然搭建了有什么用呢？</p>
<p>接下来，就说明一下如何发布文章</p>
<p>调用hexo命令</p>
<pre><code>hexo n “文章名字”</code></pre><p><strong>创建的文章会在source/_posts文件夹里面，是markdown格式的，所以需要学一下，但是也没那么难，不像html一样麻烦</strong></p>
<p>文章也有一些必要信息可以添加</p>
<pre><code>---
title: 标题 # 自动创建，如 hello-world
date: 日期 # 自动创建，如 2019-09-22 01:47:21
tags:
- 标签1
- 标签2
- 标签3
categories:
- 分类1
- 分类2
---</code></pre><p>添加信息就vans了</p>
<p>还有一些别的信息，请查看<a href="https://hexo.io/zh-cn/docs/writing.html" target="_blank" rel="noopener">https://hexo.io/zh-cn/docs/writing.html</a></p>
<p><strong>然后也可以配置一些标签页啥的，具体看看别的，或者在不久的将来，我会再次发布</strong><br>详见hexo官方文档<a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="noopener">https://hexo.io/zh-cn/docs/</a>以查看相关细节，这里就不一一介绍</p>
]]></content>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2019/12/04/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre>
<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
  </entry>
</search>
