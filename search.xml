<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>如何建立个人博客网站 hexo+github page</title>
    <url>/2019/12/05/ru-he-jian-li-ge-ren-bo-ke-wang-zhan-hexo-github-page/</url>
    <content><![CDATA[<h2 id="建立属于自己的博客网站"><a href="#建立属于自己的博客网站" class="headerlink" title="建立属于自己的博客网站"></a>建立属于自己的博客网站</h2><h3 id="基于github和hexo博客框架"><a href="#基于github和hexo博客框架" class="headerlink" title="基于github和hexo博客框架"></a>基于github和hexo博客框架</h3><p>博客在当前世界中对于程序员而言是比较有影响的<br>能长期积累发布博客并且质量比较高的话有利于自己在很多方面的发展<br>有的人选择基于现有的博客网站，有的人会想自己来创建一个</p>
<p>在这里先跟大家说一些准备条件，有些同学可能一听到搭建博客就望而却步。弄个博客网站，不得有台服务器吗？不得搞数据库吗？不得注册域名吗？没事，如果都没有，那照样是能搭建一个博客的。</p>
<p>GitHub 是个好东西啊，它提供了 GitHub Pages 帮助我们来架设一个静态网站，这就解决了服务器的问题。</p>
<p>Hexo 这个博客框架没有那么重量级，它是 MarkDown 直接写文章的，然后 Hexo 可以直接将文章编译成静态网页文件并发布，所以这样文章的内容、标题、标签等信息就没必要存数据库里面了，是直接纯静态页面了，这就解决了数据库的问题。</p>
<p>GitHub Pages 允许每个账户创建一个名为 {username}.github.io 的仓库，另外它还会自动为这个仓库分配一个 github.io 的二级域名，这就解决了域名的问题，当然如果想要自定义域名的话，也可以支持。</p>
<p>那么如何来创建一个自己的博客站点呢<br>这里从0开始基于github和hexo博客框架建立起个人博客网站</p>
<p>首先肯定需要有一个github的账户 如果没有就自己去建一个<a href="https://github.com" target="_blank" rel="noopener">github</a><br>hexo框架是基于nodejs的使用需要下载nodejs<a href="https://nodejs.org/dist/v12.13.1/node-v12.13.1-x64.msi" target="_blank" rel="noopener">下载</a><br>判断是否安装成功可以在cmd中输入</p>
<pre><code>node -v</code></pre><p>以及</p>
<pre><code>npm -v</code></pre><p>如果cmd命令行出现了版本信息那么就成功可以进行下一步 否则可能是安装步骤出错了</p>
<p>实际上如果安装正确应该也会有一个npm的运行程序<br>但是由于国内原因可能下载速度会比较慢<br>所以这里选择去淘宝镜像站下载一个cnpm以确保下载速度能提高点<br>在cmd命令行输入</p>
<pre><code>npm install -g cnpm —registry=https://registry.npm.taobao.org</code></pre><p><strong>注意 registry前面是两个-</strong></p>
<h2 id="在github上创建仓库"><a href="#在github上创建仓库" class="headerlink" title="在github上创建仓库"></a>在github上创建仓库</h2><p>在整个博客搭建前需要先在GitHub上新建一个仓库，名称为 {username}.github.io，注意这个名比较特殊，必须要是 github.io 为后缀结尾的。</p>
<p>eg：我的github昵称是oslijw 所以这个仓库名字必须是oslijw.github.io</p>
<p>新建完成后就可以进行下一步操作</p>
<h2 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h2><p>上面已经安装好了nodejs和cnpm</p>
<p>下一步就可以安装hexo博客框架</p>
<p>在cmd中输入</p>
<pre><code>cnpm install -g hexo-cli</code></pre><p>这边实际上是安装了hexo的命令行工具</p>
<p>安装成功后就可以开始使用好用的hexo命令</p>
<h2 id="初始化hexo项目"><a href="#初始化hexo项目" class="headerlink" title="初始化hexo项目"></a>初始化hexo项目</h2><p>接下来就需要初始化一个hexo项目</p>
<pre><code>hexo init {program-name}</code></pre><p>像我给我的blog项目直接命名blog所以代码是这样的：</p>
<pre><code>hexo init blog</code></pre><p>windows下使用</p>
<pre><code>dir</code></pre><p>就可以列出当前目录下的文件<br>这时候会发现有一些css 之类的文件</p>
<p>跳到新建文件夹下使用</p>
<pre><code>hexo generate</code></pre><p>这时候就能发现这些文件夹出现在oublic文件夹下</p>
<p>接下来，激动人心的时候到了，看看项目能不能在本地跑通，在cmd输入</p>
<pre><code>hexo s</code></pre><p><strong>其实这个s代表server 也可以认为是start 但是实际上全部都打上去是hexo server</strong></p>
<p>然后命令行就会出现</p>
<pre><code>INFO Start processing
INFO Hexo is running at http://localhost:4000 . Press Ctrl+C to stop</code></pre><p>这就说明我们可以在本地的4000端口访问自己的博客网站<br>在浏览器搜索栏输入 <a href="https://localhost:4000" target="_blank" rel="noopener">https://localhost:4000</a> 就可以了</p>
<p>所以只需要三个命令就创建好一个博客了</p>
<h2 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h2><p>接下来我们来将这个初始化的博客进行一下部署，放到 GitHub Pages 上面验证一下其可用性。成功之后我们可以再进行后续的修改，比如修改主题、修改页面配置等等。</p>
<p>那么怎么把这个页面部署到 GitHub Pages 上面呢，其实 Hexo 已经给我们提供一个命令，利用它我们可以直接将博客一键部署，不需要手动去配置服务器或进行其他的各项配置。</p>
<pre><code>hexo d</code></pre><p><strong>这个d是deploy</strong></p>
<p>但是呢直接部署会报错吧 因为还没配置，连仓库地址都不知道 怎么部署上去呢？</p>
<p>所以就需要修改配置文件</p>
<p>打开根目录下的 _config.yml 文件，找到 Deployment 这个地方，把刚才新建的 Repository 的地址贴过来，然后指定分支为 master 分支，最终修改为如下内容：</p>
<pre><code>deployment.html
deploy:
type: git
repo: {git repo ssh address}
branch: master</code></pre><p>repo那边需要加入自己git的远程地址</p>
<p>当然这时候还是不能直接部署，真觉得改个配置文件就可以了吗？当然不行 这时候还会报错 还欠缺一个支持git部署的插件hexo-deployer-git<br>命令如下</p>
<pre><code>cnpm install —save hexo-deployer-git</code></pre><p>安装成功后执行部署命令</p>
<pre><code>hexo d</code></pre><p>然后就可以通过github访问<br>https://{username}.github.io<br>就可以访问了 如果能正常访问就说明部署成功 如果失败就说明可能有问题</p>
<h2 id="一些相关配置"><a href="#一些相关配置" class="headerlink" title="一些相关配置"></a>一些相关配置</h2><p>这边就不具体展开 需要的时候再自行去查找一下配置方法，简单说明几个配置<br>主要是在-config.yml文件中进行配置</p>
<h3 id="配置主题"><a href="#配置主题" class="headerlink" title="配置主题"></a>配置主题</h3><p>有的人可能会觉得，诶自带的主题不好看，想从网上找一些好看的主题进行配置</p>
<p>诶，其实也是可以自行配置的步骤如下<br>首先，需要从github上找到相应的主题资源然后clone到本地</p>
<p>例如：在hexo中比较流行的框架也就是next了，而且在一些功能上也比较完善，不然哪里能在github上有那么大的star量是吧</p>
<p>我们的clone也是直接到github上的repository下载下来</p>
<p>主题的 GitHub 地址是：<a href="https://github.com/theme-next/hexo-theme-next" target="_blank" rel="noopener">https://github.com/theme-next/hexo-theme-next</a> ，我们可以直接把 master 分支 Clone 下来</p>
<pre><code>git clone https://github.com/theme-next/hexo-theme-next themes/next</code></pre><p><strong>此时命令行应该退到根目录下</strong></p>
<p>执行完毕之后 Next 主题的源码就会出现在项目的 themes/next 文件夹下。</p>
<p>然后我们需要修改下博客所用的主题名称，修改项目根目录下的 _config.yml 文件，找到 theme 字段，修改为 next 即可，修改如下：</p>
<pre><code>theme：next</code></pre><p><strong>这边只是做了一个范例 也可以从GitHub上弄别的主题 操作方面也是大同小异</strong></p>
<h2 id="配置主题样式"><a href="#配置主题样式" class="headerlink" title="配置主题样式"></a>配置主题样式</h2><p>有了主题，但是肯定也要自定义化修改一下配置吧，总不能按着人家原有的样子直接使用吧</p>
<p>Next 主题内部也提供了一个配置文件，名字同样叫做 _config.yml，只不过位置不一样，它在 themes/next 文件夹下，Next 主题里面所有的功能都可以通过这个配置文件来控制，下文所述的内容都是修改的 themes/next/_config.yml 文件。</p>
<h3 id="样式"><a href="#样式" class="headerlink" title="样式"></a>样式</h3><p>Next 主题还提供了多种样式，风格都是类似黑白的搭配，但整个布局位置不太一样，通过修改配置文件的 scheme 字段即可，我选了 Pisces 样式，修改 _config.yml （注意是 themes/next/_config.yml 文件）如下：</p>
<pre><code>scheme: Pisces</code></pre><p>另外还有几个可选项，比如：<br>Muse，Mist，Pisces，Gemini</p>
<p>可以根据自己的喜好对其进行更换</p>
<h3 id="favicon"><a href="#favicon" class="headerlink" title="favicon"></a>favicon</h3><p>favicon 就是站点标签栏的小图标，默认是用的 Hexo 的小图标，如果我们有站点 Logo 的图片的话，我们可以自己定制小图标。</p>
<p>但这并不意味着我们需要自己用 PS 自己来设计，已经有一个网站可以直接将图片转化为站点小图标，站点链接为：<a href="https://realfavicongenerator.net" target="_blank" rel="noopener">https://realfavicongenerator.net</a>，到这里上传一张图，便可以直接打包下载各种尺寸和适配不同设备的小图标。</p>
<p>图标下载下来之后把它放在 themes/next/source/images 目录下面。</p>
<p>然后在配置文件里面找到 favicon 配置项，把一些相关路径配置进去即可，示例如下：</p>
<pre><code>favicon:
small: /images/favicon-16x16.png
medium: /images/favicon-32x32.png
apple_touch_icon: /images/apple-touch-icon.png
safari_pinned_tab: /images/safari-pinned-tab.svg</code></pre><p>然后刷新一下页面就可以看到已经改变了</p>
<p><strong>还有一些更多的操作在这边就不一一列举了</strong></p>
<h2 id="发布文章"><a href="#发布文章" class="headerlink" title="发布文章"></a>发布文章</h2><p>现在整个博客只有一篇文章，那么如何写文章呢？配置好了博客，当然是关注如何发布文章，不然搭建了有什么用呢？</p>
<p>接下来，就说明一下如何发布文章</p>
<p>调用hexo命令</p>
<pre><code>hexo n “文章名字”</code></pre><p><strong>创建的文章会在source/_posts文件夹里面，是markdown格式的，所以需要学一下，但是也没那么难，不像html一样麻烦</strong></p>
<p>文章也有一些必要信息可以添加</p>
<pre><code>---
title: 标题 # 自动创建，如 hello-world
date: 日期 # 自动创建，如 2019-09-22 01:47:21
tags:
- 标签1
- 标签2
- 标签3
categories:
- 分类1
- 分类2
---</code></pre><p>添加信息就vans了</p>
<p>还有一些别的信息，请查看<a href="https://hexo.io/zh-cn/docs/writing.html" target="_blank" rel="noopener">https://hexo.io/zh-cn/docs/writing.html</a></p>
<p><strong>然后也可以配置一些标签页啥的，具体看看别的，或者在不久的将来，我会再次发布</strong><br>详见hexo官方文档<a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="noopener">https://hexo.io/zh-cn/docs/</a>以查看相关细节，这里就不一一介绍</p>
]]></content>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2019/12/04/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre>
<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
  </entry>
</search>
